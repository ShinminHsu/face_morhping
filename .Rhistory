print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
df = subset
df_sort = df[order(df$ID, df$imgID, df$imgEmo, df$imgInt), ]
rownames(df_sort) <- NULL
IDs = unique(df_sort$ID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
#subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', emotion]
for (emotion in emotions) {
subset2 = df_sort[df_sort$ID == ID & df_sort$imgEmo == emotion, emotion]
flatten = c(flatten, subset2)
}
#flatten = c(flatten, subset1)
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
kripp.alpha(t(as.matrix(ratings)), "ordinal")
IDs = unique(df_sort$ID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
for (col in emotions) {
subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', col]
for (emotion in emotions){
subset2 = df_sort[df_sort$ID == ID & df_sort$imgEmo == emotion, col]
flatten = c(flatten, subset2)
}
flatten = c(flatten, subset1)
}
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
kripp.alpha(t(as.matrix(ratings)), "ordinal")
library(irr)
df <- read.csv('human_rating_caucasian.csv')
emotions = c('happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised')
subset = select(df, 'ID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
# print(detect)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
df = subset
df_sort = df[order(df$ID, df$imgID, df$imgEmo, df$imgInt), ]
rownames(df_sort) <- NULL
compute_all_ratings <- function(df_sort) {
IDs = unique(df_sort$ID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
for (col in emotions) {
subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', col]
for (emotion in emotions){
subset2 = df_sort[df_sort$ID == ID & df_sort$imgEmo == emotion, col]
flatten = c(flatten, subset2)
}
flatten = c(flatten, subset1)
}
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a$value)
}
compute_raw <- function(df_sort){
IDs = unique(df_sort$ID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
#subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', emotion]
for (emotion in emotions) {
subset2 = df_sort[df_sort$ID == ID & df_sort$imgEmo == emotion, emotion]
flatten = c(flatten, subset2)
}
#flatten = c(flatten, subset1)
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a$value)
}
all = compute_all_ratings(df_sort)
raw = compute_raw(df_sort)
View(df)
df <- read.csv('human_rating_taiwanese.csv')
emotions = c('happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised')
subset = select(df, 'ID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
# print(detect)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
df = subset
df_sort = df[order(df$ID, df$imgID, df$imgEmo, df$imgInt), ]
rownames(df_sort) <- NULL
compute_all_ratings <- function(df_sort) {
IDs = unique(df_sort$ID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
for (col in emotions) {
subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', col]
for (emotion in emotions){
subset2 = df_sort[df_sort$ID == ID & df_sort$imgEmo == emotion, col]
flatten = c(flatten, subset2)
}
flatten = c(flatten, subset1)
}
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a$value)
}
compute_raw <- function(df_sort){
IDs = unique(df_sort$ID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
#subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', emotion]
for (emotion in emotions) {
subset2 = df_sort[df_sort$ID == ID & df_sort$imgEmo == emotion, emotion]
flatten = c(flatten, subset2)
}
#flatten = c(flatten, subset1)
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a$value)
}
all = compute_all_ratings(df_sort)
raw = compute_raw(df_sort)
setwd("~/Documents/01_NTU/MILab/Morphing Paper/Release")
df <- read.csv('human_rating_caucasian.csv')
emotions = c('happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised')
subset = select(df, 'ID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
# print(detect)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
subset = select(df, 'ID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
View(df)
subset = select(df, 'Raters_ID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
# print(detect)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
df = subset
df_sort = df[order(df$ID, df$imgID, df$imgEmo, df$imgInt), ]
df_sort = df[order(df$Raters_ID, df$imgID, df$imgEmo, df$imgInt), ]
df <- read.csv('human_rating_caucasian.csv')
emotions = c('happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised')
subset = select(df, 'ratersID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
df = subset
df_sort = df[order(df$ratersID, df$imgID, df$imgEmo, df$imgInt), ]
rownames(df_sort) <- NULL
compute_all_ratings <- function(df_sort) {
IDs = unique(df_sort$ratersID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
for (col in emotions) {
subset1 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == 'neutral', col]
for (emotion in emotions){
subset2 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == emotion, col]
flatten = c(flatten, subset2)
}
flatten = c(flatten, subset1)
}
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a$value)
}
compute_raw <- function(df_sort){
IDs = unique(df_sort$ratersID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
#subset1 = df_sort[df_sort$ID == ID & df_sort$imgEmo == 'neutral', emotion]
for (emotion in emotions) {
subset2 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == emotion, emotion]
flatten = c(flatten, subset2)
}
#flatten = c(flatten, subset1)
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a$value)
}
all = compute_all_ratings(df_sort)
raw = compute_raw(df_sort)
wrapper <- function() {
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
return(subset)
}
library(irr)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
remove_outliers_wrapper <- function(subset) {
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
return(subset)
}
compute_all_ratings <- function(df_sort) {
IDs = unique(df_sort$ratersID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
for (col in emotions) {
subset1 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == 'neutral', col]
for (emotion in emotions){
subset2 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == emotion, col]
flatten = c(flatten, subset2)
}
flatten = c(flatten, subset1)
}
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a)
}
df <- read.csv('human_rating_caucasian.csv')
emotions = c('happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised')
subset = select(df, 'ratersID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
df = remove_outliers_wrapper(subset)
df_sort = df[order(df$ratersID, df$imgID, df$imgEmo, df$imgInt), ]
rownames(df_sort) <- NULL
all = compute_all_ratings(df_sort)
print(all)
df <- read.csv('human_rating_taiwanese.csv')
emotions = c('happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised')
subset = select(df, 'ratersID', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised', 'imgID', 'imgEmo', 'imgInt')
df = remove_outliers_wrapper(subset)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
remove_outliers_wrapper <- function(subset) {
for (int in c(25, 50, 75, 100)) {
for (ID in c(16, 18, 21, 23, 38, 58)) {
for (emo in emotions) {
for (colEmo in emotions){
rating = subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo]
detect = remove_outliers(rating)
if(anyNA(detect)){
print(detect)
subset[subset$imgInt == int & subset$imgEmo == emo & subset$imgID == ID, colEmo] = detect
}
}
}
}
}
return(subset)
}
compute_all_ratings <- function(df_sort) {
IDs = unique(df_sort$ratersID)
ratings = data.frame()
for(ID in IDs){
flatten = c()
for (col in emotions) {
subset1 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == 'neutral', col]
for (emotion in emotions){
subset2 = df_sort[df_sort$ratersID == ID & df_sort$imgEmo == emotion, col]
flatten = c(flatten, subset2)
}
flatten = c(flatten, subset1)
}
flatten_df = data.frame(ID=flatten)
colnames(flatten_df) = ID
if(ncol(ratings) == 0){
ratings = flatten_df
}else{
ratings = cbind(ratings, flatten_df)
}
}
a = kripp.alpha(t(as.matrix(ratings)), "ordinal")
return(a)
}
df <- read.csv('human_rating_taiwanese.csv')
df = remove_outliers_wrapper(subset)
df_sort = df[order(df$ratersID, df$imgID, df$imgEmo, df$imgInt), ]
rownames(df_sort) <- NULL
all = compute_all_ratings(df_sort)
print(all)
setwd("~/Documents/01_NTU/MILab/Morphing Paper/Release")
ca_data <- read.csv('human_rating_taiwanese.csv')
ca_summary <- ca_data %>%
group_by(imgID, imgInt, imgEmo) %>%
summarise(
hm = mean(happy), hsd = sd(happy), am = mean(angry), asd = sd(angry), sam = mean(sad), sasd = sd(sad),
fm = mean(fearful), fsd = sd(fearful), surm = mean(surprised), sursd = sd(surprised), dm = mean(disgusted), dsd = sd(disgusted)
)
View(ca_summary)
View(ca_data)
ca_summary[is.na(ca_summary)] <- 0
View(ca_summary)
write.csv(ca_summary, 'ca_summary.csv', row.names = FALSE)
nationality = 'taiwanese'
file = paste0('human_rating_', nationality, '.csv')
savefile = paste0(nationality, '_summary.csv')
data <- read.csv(file)
summary <- data %>%
group_by(imgID, imgInt, imgEmo) %>%
summarise(
hm = mean(happy), hsd = sd(happy), am = mean(angry), asd = sd(angry), sam = mean(sad), sasd = sd(sad),
fm = mean(fearful), fsd = sd(fearful), surm = mean(surprised), sursd = sd(surprised), dm = mean(disgusted), dsd = sd(disgusted)
)
View(summary)
summary[is.na(summary)] <- 0
write.csv(summary, savefile, row.names = FALSE)
nationality = 'caucasian'
nationality = 'caucasian'
file = paste0('human_rating_', nationality, '.csv')
savefile = paste0(nationality, '_summary.csv')
data <- read.csv(file)
summary <- data %>%
group_by(imgID, imgInt, imgEmo) %>%
summarise(
hm = mean(happy), hsd = sd(happy), am = mean(angry), asd = sd(angry), sam = mean(sad), sasd = sd(sad),
fm = mean(fearful), fsd = sd(fearful), surm = mean(surprised), sursd = sd(surprised), dm = mean(disgusted), dsd = sd(disgusted)
)
summary[is.na(summary)] <- 0
View(summary)
write.csv(summary, savefile, row.names = FALSE)
